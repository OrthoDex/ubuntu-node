name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: ubuntu-node

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          TEMP_IMAGE_NAME=$(echo $IMAGE_NAME-"${{ github.ref }}"-"${{ github.run_id }}":test)
          docker build . --file Dockerfile --tag $TEMP_IMAGE_NAME
          if [ -f tests/main.yml ]; then
            ## install container test tools
            curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 \
              && chmod +x container-structure-test-linux-amd64 \
              && mv container-structure-test-linux-amd64 container-structure-test

            ./container-structure-test test --image $TEMP_IMAGE_NAME \
              --config tests/main.yaml
          else
            echo "No tests!"
            exit 1
          fi

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push-github:
    branches:
      - master
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$(echo docker.pkg.github.com/"${{ github.repository }}"/$IMAGE_NAME | awk '{print tolower($0)}')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          ## Tag with node version
          docker tag image $IMAGE_ID:10
          
          ## Push all tags
          docker push $IMAGE_ID
          
  push-dockerhub:
    # Ensure build job passes before pushing image.
    needs: test
    branches:
      - master

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into dockerhub registry
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=ishaanmalhi/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          ## Tag with node version
          docker tag image $IMAGE_ID:10
          
          ## Push all tags
          docker push $IMAGE_ID

